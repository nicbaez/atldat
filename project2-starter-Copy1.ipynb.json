{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 2 \n",
    "\n",
    "In this project, you will implement the exploratory analysis plan developed in Project 1. This will lay the groundwork for our our first modeling exercise in Project 3."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1: Load the python libraries you will need for this project "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#imports\n",
    "from __future__ import division\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "from numpy.random import randn\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2: Read in your data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   admit  gre   gpa  prestige\n",
      "0      0  380  3.61         3\n",
      "1      1  660  3.67         3\n",
      "2      1  800  4.00         1\n",
      "3      1  640  3.19         4\n",
      "4      0  520  2.93         4\n"
     ]
    }
   ],
   "source": [
    "#Read in data from source \n",
    "df_raw = pd.read_csv(\"../assets/admissions.csv\")\n",
    "print df_raw.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "#### Question 1. How many observations are in our dataset? \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "admit       400\n",
       "gre         398\n",
       "gpa         398\n",
       "prestige    399\n",
       "dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: 400 observations. GRE and GPA have 2 missing values, Rank/Presting has 1 missing value.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 2. Create a summary table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.00000</td>\n",
       "      <td>399.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.317500</td>\n",
       "      <td>588.040201</td>\n",
       "      <td>3.39093</td>\n",
       "      <td>2.486216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.466087</td>\n",
       "      <td>115.628513</td>\n",
       "      <td>0.38063</td>\n",
       "      <td>0.945333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>2.26000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>520.000000</td>\n",
       "      <td>3.13000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>580.000000</td>\n",
       "      <td>3.39500</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>660.000000</td>\n",
       "      <td>3.67000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            admit         gre        gpa    prestige\n",
       "count  400.000000  398.000000  398.00000  399.000000\n",
       "mean     0.317500  588.040201    3.39093    2.486216\n",
       "std      0.466087  115.628513    0.38063    0.945333\n",
       "min      0.000000  220.000000    2.26000    1.000000\n",
       "25%      0.000000  520.000000    3.13000    2.000000\n",
       "50%      0.000000  580.000000    3.39500    2.000000\n",
       "75%      1.000000  660.000000    3.67000    3.000000\n",
       "max      1.000000  800.000000    4.00000    4.000000"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     admit  gre   gpa  prestige\n",
      "0        0  380  3.61         3\n",
      "1        1  660  3.67         3\n",
      "2        1  800  4.00         1\n",
      "3        1  640  3.19         4\n",
      "4        0  520  2.93         4\n",
      "5        1  760  3.00         2\n",
      "6        1  560  2.98         1\n",
      "7        0  400  3.08         2\n",
      "8        1  540  3.39         3\n",
      "9        0  700  3.92         2\n",
      "10       0  800  4.00         4\n",
      "11       0  440  3.22         1\n",
      "12       1  760  4.00         1\n",
      "13       0  700  3.08         2\n",
      "14       1  700  4.00         1\n",
      "15       0  480  3.44         3\n",
      "16       0  780  3.87         4\n",
      "17       0  360  2.56         3\n",
      "18       0  800  3.75         2\n",
      "19       1  540  3.81         1\n",
      "20       0  500  3.17         3\n",
      "21       1  660  3.63         2\n",
      "22       0  600  2.82         4\n",
      "23       0  680  3.19         4\n",
      "24       1  760  3.35         2\n",
      "25       1  800  3.66         1\n",
      "26       1  620  3.61         1\n",
      "27       1  520  3.74         4\n",
      "28       1  780  3.22         2\n",
      "29       0  520  3.29         1\n",
      "..     ...  ...   ...       ...\n",
      "370      1  540  3.77         2\n",
      "371      1  680  3.76         3\n",
      "372      1  680  2.42         1\n",
      "373      1  620  3.37         1\n",
      "374      0  560  3.78         2\n",
      "375      0  560  3.49         4\n",
      "376      0  620  3.63         2\n",
      "377      1  800  4.00         2\n",
      "378      0  640  3.12         3\n",
      "379      0  540  2.70         2\n",
      "380      0  700  3.65         2\n",
      "381      1  540  3.49         2\n",
      "382      0  540  3.51         2\n",
      "383      0  660  4.00         1\n",
      "384      1  480  2.62         2\n",
      "385      0  420  3.02         1\n",
      "386      1  740  3.86         2\n",
      "387      0  580  3.36         2\n",
      "388      0  640  3.17         2\n",
      "389      0  640  3.51         2\n",
      "390      1  800  3.05         2\n",
      "391      1  660  3.88         2\n",
      "392      1  600  3.38         3\n",
      "393      1  620  3.75         2\n",
      "394      1  460  3.99         3\n",
      "395      0  620  4.00         2\n",
      "396      0  560  3.04         3\n",
      "397      0  460  2.63         2\n",
      "398      0  700  3.65         2\n",
      "399      0  600  3.89         3\n",
      "\n",
      "[400 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df_raw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 3. Why would GRE have a larger STD than GPA?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Answer: GREs larger STD could indicate that \n",
    "##### the data are more spread out than GPA since the mean is higher as well. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### Question 4. Drop data points with missing data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### Question 5. Confirm that you dropped the correct data. How can you tell? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "admit       400\n",
      "gre         398\n",
      "gpa         398\n",
      "prestige    399\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df_raw.dropna()\n",
    "print df_raw.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 6. Create box plots for GRE and GPA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1190a8850>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nmrUd0gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119169190>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_raw['gpa'].plot(kind='box')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 7. What do this plots show?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: The GRE and GPA have outliers below the first quartile. Slightly higher variation for GPA, even though it is closer to admit's mean. The GRE boxplot is slightly skewed, if we were to cut it down the middle at the mean. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 8. Describe each distribution "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# plot the distribution of each variable \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 9.  If our model had an assumption of a normal distribution would we meet that requirement? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 10.  Does this distribution need correction? If so, why? How? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 11. Which of our variables are potentially colinear? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>admit</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.182919</td>\n",
       "      <td>0.175952</td>\n",
       "      <td>-0.241355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gre</th>\n",
       "      <td>0.182919</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>-0.124533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gpa</th>\n",
       "      <td>0.175952</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.059031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prestige</th>\n",
       "      <td>-0.241355</td>\n",
       "      <td>-0.124533</td>\n",
       "      <td>-0.059031</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             admit       gre       gpa  prestige\n",
       "admit     1.000000  0.182919  0.175952 -0.241355\n",
       "gre       0.182919  1.000000  0.382408 -0.124533\n",
       "gpa       0.175952  0.382408  1.000000 -0.059031\n",
       "prestige -0.241355 -0.124533 -0.059031  1.000000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw.corr()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 12. What did you find?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 13. Write an analysis plan for exploring the association between grad school admissions rates and prestige of  undergraduate schools."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 14. What is your hypothesis? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus/Advanced"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Bonus: Explore alternatives to dropping obervations with missing data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Bonus: Log transform the skewed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Advanced: Impute missing data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
